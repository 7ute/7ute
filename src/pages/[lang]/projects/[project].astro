---
import { Image } from "astro:assets"
import { PROJECTS, BACKGROUNDS, getSvgIconPath } from "../../../data"
import Layout from "../../../layouts/Layout.astro"
import { getLocale } from "../../../paraglide/runtime"
import { defaultLocale, localizedTrimmedUrl } from "../../../tools/locales"
import { Icon } from 'astro-icon/components'
import { m } from "../../../paraglide/messages"

const { project = null } = Astro.params
const projectData = PROJECTS[project] ?? null
if (!projectData) {
    return new Response(null, { status: 404 })
}
const locale = getLocale()
const referer = Astro.request.headers.get('Referer')?.replace(/\/+(#.*?)?$/, '');
const homePageUrl = localizedTrimmedUrl(Astro, locale, '')
const dataNavigate = referer == homePageUrl ? 'back' : 'push'
const image = projectData.image
    ? BACKGROUNDS[`/src/images/projects/backgrounds/${projectData.image}`]()
    : null
const video = projectData.video
    ? `/videos/${projectData.video}`
    : null
const renderedImage = (await image)?.default
const ratio = image && (renderedImage.width < renderedImage.height)
    ? 'portrait'
    : (
        image && (renderedImage.width > renderedImage.height)
        ? 'landscape'
        : 'square'
    )
---
<Layout title={`${m.Project()} ${projectData.title}`}>
    <div class="bg-slate-600 text-white h-screen" x-data={`{ ratio: '${ratio}', dataNavigate: '${dataNavigate}' }`}>

        <div class="absolute top-4 left-4 right-4 flex items-center justify-between">
            <a class="group" href={homePageUrl}>
                <Icon name="lucide:house" class="size-12 opacity-80 group-hover:opacity-100 transition-all" />
            </a>
            <a class="group" @click="navigateBack" data-navigate={dataNavigate} href={`${homePageUrl}#portfolio`}>
                <Icon name="lucide:minimize-2" class="size-12 opacity-80 group-hover:opacity-100 transition-all" />
            </a>
        </div>

        <div class="group max-w-5xl mx-auto">
            <div class="block pt-16 lg:pt-0 lg:flex lg:gap-8 h-screen overflow-auto">
                <div class="flex-2/3 px-20 lg:px-8 lg:overflow-auto lg:flex flex-col items-center justify-center text-left"
                    x-data="{ focusedTech: null }"
                    :class="{
                        'flex-1/2': ratio == 'square',
                        'flex-2/3': ratio == 'portrait',
                        'flex-2/5': ratio == 'landscape',
                    }">
                    <h1 class="font-display font-bold w-full text-5xl mb-12">{projectData.title}</h1>
                    <p class="w-full text-xl mb-12">{projectData.description[locale] ?? projectData.description[defaultLocale]}</p>
                    <div class="w-full flex items-start justify-between gap-2">
                        <div class="flex flex-wrap gap-2 items-start">
                            {projectData.techs.map((tech, n) => (
                                <div x-data={`{ shown: false, tech: '${tech}' }`} title={tech} data-tooltip-placement="bottom">
                                    <img src={getSvgIconPath(tech)}
                                        x-intersect="shown = true"
                                        @pointerenter="focusedTech = tech"
                                        @pointerleave="focusedTech = null"
                                        class="size-12 translate-y-12 opacity-0 transition-all duration-500 delay-[var(--icon-delay)] group-hover:delay-0 group-hover:duration-150"
                                        :class="{
                                            '!translate-y-0 !opacity-100': shown,
                                            'saturate-0': focusedTech && focusedTech != tech,
                                            'saturate-100': focusedTech && focusedTech == tech,
                                        }"
                                        style={`--icon-delay: ${n * 100}ms`}
                                        height="4rem"
                                        width="4rem"
                                        alt={tech} />
                                </div>
                            ))}
                        </div>
                        <div class="flex flex-wrap gap-2 items-end">
                            {projectData.types.map((type, n) => (
                                <div x-data={`{ shown: false, tech: '${type}' }`} title={m[type] ? m[type]() : type} data-tooltip-placement="bottom">
                                    <img src={getSvgIconPath(type)}
                                        x-intersect="shown = true"
                                        @pointerenter="focusedTech = tech"
                                        @pointerleave="focusedTech = null"
                                        class="size-12 translate-y-12 opacity-0 transition-all duration-500 delay-[var(--icon-delay)] group-hover:delay-0 group-hover:duration-150"
                                        :class="{
                                            '!translate-y-0 !opacity-100': shown,
                                            'saturate-0': focusedTech && focusedTech != tech,
                                            'saturate-100': focusedTech && focusedTech == tech,
                                        }"
                                        style={`--icon-delay: ${n * 100}ms`}
                                        height="4rem"
                                        width="4rem"
                                        alt={type} />
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                {image && (
                    <div class="flex-1/3 max-w-xl mx-auto lg:max-w-none lg:h-screen lg:overflow-auto py-8 flex items-center"
                        :class="{
                            'flex-1/2': ratio == 'square',
                            'flex-1/3': ratio == 'portrait',
                            'flex-3/5': ratio == 'landscape',
                        }"
                    >
                        <Image src={image} alt={projectData.title} class="w-full h-auto" height={renderedImage.height} width={renderedImage.width} transition:name={`project-${project}`} />
                    </div>
                )}
                {video && (
                    <div class="flex-1/2 max-w-xl mx-auto lg:max-w-none lg:h-screen lg:overflow-auto py-8 flex items-center">
                        <div class="aspect-4/3 rounded-xl overflow-hidden bg-black">
                            <video src={video} autoplay loop />
                        </div>
                    </div>
                )}
            </div>

        </div>
    </div>
</Layout>
<script>
    window.navigateBack = (e) => {
        console.log(e.currentTarget.dataset)
        if (e.currentTarget.dataset?.navigate === 'back') {
            e.preventDefault()
            window.history.back()
        }
    }
</script>
